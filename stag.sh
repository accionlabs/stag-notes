#!/bin/bash
# STAG - Strategy and Technology Advisory Group Documentation Management
# Usage: ./stag.sh [command] [options]
# Note: This script should be run from the root of the base Jekyll repository
# Personal documentation is stored in the _docs/ folder (which is gitignored)

# Configuration
STAG_ORG="accionlabs"  # Using existing AccionLabs organization
SCRIPT_VERSION="1.0.0"
DOCS_DIR="_docs"  # Personal documentation goes here

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emoji shortcuts
SUCCESS="✅"
ERROR="❌" 
INFO="ℹ️"
WARNING="⚠️"
ROCKET="🚀"
FOLDER="📁"
SYNC="🔄"
LOCK="🔒"
CONTRIBUTE="📤"
DOWNLOAD="📥"

# =============================================================================
# HELP FUNCTION
# =============================================================================

show_help() {
    echo -e "${BLUE}STAG Documentation Management Tool v${SCRIPT_VERSION}${NC}"
    echo -e "${PURPLE}Strategy and Technology Advisory Group${NC}"
    echo ""
    echo -e "${CYAN}USAGE:${NC}"
    echo "  ./stag.sh [command] [options]"
    echo "  ${YELLOW}Note: Run from the base Jekyll repository root${NC}"
    echo "  ${YELLOW}Personal documentation is stored in _docs/ folder${NC}"
    echo ""
    echo -e "${CYAN}SETUP COMMANDS:${NC}"
    echo "  init [name]                      Initialize personal STAG documentation"
    echo "  add-shared [repo]                Add shared repository to your docs"  
    echo "  add-project [repo]               Add client project to your docs"
    echo "  create-project [client]          Create new client project repository"
    echo "  add-permission [repo] [user] [role]  Grant repository access to team member"
    echo ""
    echo -e "${CYAN}DAILY WORKFLOW COMMANDS:${NC}"
    echo "  sync                             Sync your repositories"
    echo "  status                           Show status of your repositories"
    echo "  contribute [path] [msg]          Contribute changes back to shared repositories"
    echo "  list-permissions [repo]          Show who has access to a repository"
    echo ""
    echo -e "${CYAN}EXAMPLES:${NC}"
    echo "  ./stag.sh init saurabh"
    echo "  ./stag.sh add-shared stag-shared"
    echo "  ./stag.sh add-project stag-client-alpha-strategy" 
    echo "  ./stag.sh sync"
    echo "  ./stag.sh contribute shared/shared 'Updated proposal template'"
    echo "  ./stag.sh status"
    echo ""
    echo -e "${CYAN}HELP:${NC}"
    echo "  help, -h, --help         Show this help message"
    echo "  version, -v, --version   Show version information"
}

show_version() {
    echo "STAG Documentation Management Tool v${SCRIPT_VERSION}"
}

# =============================================================================
# UTILITY FUNCTIONS  
# =============================================================================

log_info() {
    echo -e "${INFO} ${1}"
}

log_success() {
    echo -e "${SUCCESS} ${GREEN}${1}${NC}"
}

log_error() {
    echo -e "${ERROR} ${RED}${1}${NC}"
}

log_warning() {
    echo -e "${WARNING} ${YELLOW}${1}${NC}"
}

log_step() {
    echo -e "${ROCKET} ${BLUE}${1}${NC}"
}

confirm_action() {
    local message=$1
    read -p "$(echo -e ${WARNING}) ${message} (y/N): " confirm
    [[ $confirm =~ ^[Yy]$ ]]
}

# =============================================================================
# INIT - Initialize STAG consultant documentation
# =============================================================================

cmd_init() {
    local consultant_name=${1:-$(whoami)}
    local repo_name="${consultant_name}-stag-docs"
    
    log_step "Initializing STAG documentation for ${consultant_name}..."
    
    if [ -d "$repo_name" ]; then
        log_error "Directory ${repo_name} already exists!"
        return 1
    fi
    
    # Create main repository structure
    mkdir -p "${repo_name}"
    cd "${repo_name}"
    
    git init
    
    # Create README
    cat > README.md << EOF
# ${consultant_name^}'s STAG Documentation

## Quick Navigation
- [Private Notes](private/) - Personal methodologies and insights
- [Active Projects](projects/) - Client work and engagements  
- [Shared Assets](shared/) - STAG team resources
- [Published Content](published/) - Organization-wide publications

## Getting Started
\`\`\`bash
# Sync latest shared content
../stag.sh sync

# Start offline documentation server
../stag.sh serve

# Check repository status  
../stag.sh status
\`\`\`

## Last Updated
$(date)

---
*Generated by STAG Documentation Management Tool*
EOF

    # Create folder structure
    mkdir -p private/{methodologies,insights,client-notes}
    mkdir -p projects
    mkdir -p shared  
    mkdir -p published
    
    # Create simple index page
    cat > index.md << EOF
# ${consultant_name^}'s STAG Documentation

## Quick Links
- [Private Methodologies](private/methodologies/)
- [Client Insights](private/insights/) 
- [Shared Templates](shared/templates/)
- [Active Projects](projects/)

## Recent Updates
*Use \`../stag.sh status\` to see latest changes*
EOF

    # Create sample private content
    cat > private/methodologies/README.md << EOF
# Personal Methodologies

This folder contains your private consulting methodologies and frameworks.

## Getting Started
- Document your unique approaches and techniques
- Keep client-specific insights confidential
- Share general methodologies with the team via shared repositories
EOF

    # Copy stag.sh script to parent directory if it doesn't exist
    if [ ! -f "../stag.sh" ]; then
        cp "$0" "../stag.sh" 2>/dev/null || log_warning "Copy stag.sh script manually to parent directory"
    fi
    
    # Initial commit
    git add .
    git commit -m "Initial STAG documentation setup for ${consultant_name}"
    
    log_success "STAG documentation initialized for ${consultant_name}"
    log_info "Repository created: ${FOLDER} ${repo_name}"
    log_info "Next steps:"
    echo "  1. cd ${repo_name}" 
    echo "  2. ../stag.sh add-shared stag-shared-templates"
    echo "  3. ../stag.sh add-project stag-client-[project-name]"
    echo "  4. ../stag.sh serve"
}

# =============================================================================
# ADD-SHARED - Add shared STAG repositories
# =============================================================================

cmd_add_shared() {
    local repo_name=$1
    local local_path=$2
    
    if [ -z "$repo_name" ]; then
        log_info "Available shared repositories:"
        echo "  • stag-shared"
        echo ""
        read -p "Enter repository name: " repo_name
    fi
    
    if [ ! -d "$DOCS_DIR" ] || [ ! -d "$DOCS_DIR/.git" ]; then
        log_error "Personal documentation not initialized. Run: ./stag.sh init"
        return 1
    fi
    
    # Auto-determine local path if not provided
    if [ -z "$local_path" ]; then
        case $repo_name in
            *shared*)
                local_path="shared/shared"
                ;;
            *)
                read -p "Enter local path (e.g., shared/shared): " local_path
                ;;
        esac
    fi
    
    log_step "Adding ${repo_name} to your documentation..."
    
    # Navigate to documentation directory
    cd "$DOCS_DIR"
    
    # Check if path already exists
    if [ -d "$local_path" ]; then
        if ! confirm_action "Path ${local_path} already exists. Replace it?"; then
            log_info "Operation cancelled"
            cd ..
            return 0
        fi
        rm -rf "$local_path"
    fi
    
    # Add git subtree
    git subtree add --prefix="${local_path}" \
        "git@github.com:${STAG_ORG}/${repo_name}.git" main --squash
    
    if [ $? -eq 0 ]; then
        log_success "Successfully added ${repo_name}"
        log_info "${FOLDER} Available at: ${DOCS_DIR}/${local_path}/"
    else
        log_error "Failed to add ${repo_name}"
        log_info "Check repository name and permissions"
    fi
    
    # Return to base repository root
    cd ..
}

# =============================================================================
# ADD-PROJECT - Add client project repository
# =============================================================================

cmd_add_project() {
    local consultant_name=$1
    local project_repo=$2
    
    if [ -z "$consultant_name" ]; then
        log_error "Usage: ./stag.sh add-project [consultant-name] [project-repo-name]"
        log_info "Example: ./stag.sh add-project saurabh stag-client-alpha-strategy"
        return 1
    fi
    
    local consultant_dir="${DOCS_DIR}/${consultant_name}-stag-docs"
    
    if [ ! -d "$consultant_dir" ]; then
        log_error "Consultant documentation not found: ${consultant_dir}"
        log_info "Run: ./stag.sh init ${consultant_name}"
        return 1
    fi
    
    if [ -z "$project_repo" ]; then
        log_info "Enter client project repository name"
        echo "  Example: stag-client-alpha-strategy"
        read -p "Project repository: " project_repo
    fi
    
    # Extract project name for local path
    local project_name=$(echo "$project_repo" | sed 's/stag-client-//' | sed 's/stag-//')
    local local_path="projects/${project_name}"
    
    log_step "Adding client project: ${project_repo} to ${consultant_name}'s documentation"
    log_info "${FOLDER} Local path: ${consultant_dir}/${local_path}"
    
    # Security confirmation
    if ! confirm_action "${LOCK} Confirm ${consultant_name} has access to this confidential client project"; then
        log_warning "Operation cancelled for security"
        return 1
    fi
    
    # Navigate to consultant's directory
    cd "$consultant_dir"
    
    # Check if path already exists
    if [ -d "$local_path" ]; then
        if ! confirm_action "Project ${project_name} already exists. Replace it?"; then
            log_info "Operation cancelled"
            cd ../..
            return 0
        fi
        rm -rf "$local_path"
    fi
    
    # Add git subtree
    git subtree add --prefix="${local_path}" \
        "git@github.com:${STAG_ORG}/${project_repo}.git" main --squash
    
    if [ $? -eq 0 ]; then
        log_success "Successfully added client project"
        log_info "${FOLDER} Available at: ${consultant_dir}/${local_path}/"
        log_warning "${LOCK} Remember: This contains confidential client information"
    else
        log_error "Failed to add project - check repository name and access permissions"
    fi
    
    # Return to base repository root
    cd ../..
}

# =============================================================================
# SYNC - Sync all STAG repositories
# =============================================================================

cmd_sync() {
    log_step "Starting STAG repository sync..."
    
    # Function to sync a subtree
    sync_subtree() {
        local local_path=$1
        local repo_url=$2  
        local repo_name=$(basename "$repo_url" .git)
        
        if [ -d "$local_path" ]; then
            echo -n "${DOWNLOAD} Syncing ${repo_name}... "
            if git subtree pull --prefix="$local_path" "$repo_url" main --squash >/dev/null 2>&1; then
                echo -e "${GREEN}✓${NC}"
            else
                echo -e "${RED}✗${NC}"
                log_error "Failed to sync $repo_name"
            fi
        fi
    }
    
    # Sync shared repositories
    sync_subtree "shared/templates" "git@github.com:${STAG_ORG}/stag-shared-templates.git"
    sync_subtree "shared/methodologies" "git@github.com:${STAG_ORG}/stag-shared-methodologies.git"
    sync_subtree "shared/research" "git@github.com:${STAG_ORG}/stag-shared-research.git"
    
    # Sync published content
    sync_subtree "published/whitepapers" "git@github.com:${STAG_ORG}/stag-published-whitepapers.git"
    
    # Sync project repositories (dynamically find them)
    if [ -d "projects" ]; then
        for project_dir in projects/*/; do
            if [ -d "$project_dir" ]; then
                local project_name=$(basename "$project_dir")
                local repo_name="stag-client-${project_name}"
                sync_subtree "projects/${project_name}" "git@github.com:${STAG_ORG}/${repo_name}.git"  
            fi
        done
    fi
    
    log_success "STAG sync completed!"
}

# =============================================================================
# STATUS - Show status of all STAG repositories
# =============================================================================

cmd_status() {
    echo -e "${BLUE}📊 STAG Repository Status${NC}"
    echo "========================="
    
    # Current repository info
    echo -e "${FOLDER} Current repository: ${CYAN}$(basename $(pwd))${NC}"
    local current_branch=$(git branch --show-current 2>/dev/null)
    if [ -n "$current_branch" ]; then
        echo -e "🌿 Current branch: ${CYAN}${current_branch}${NC}"
    fi
    echo ""
    
    # Count repositories
    local shared_count=0
    local project_count=0
    local published_count=0
    
    # Show shared repositories
    echo -e "${PURPLE}📚 Shared Assets:${NC}"
    if [ -d "shared" ]; then
        for dir in shared/*/; do
            if [ -d "$dir" ]; then
                local repo_name=$(basename "$dir")
                echo "  ✓ $repo_name"
                ((shared_count++))
            fi
        done
    fi
    [ $shared_count -eq 0 ] && echo "  (none)"
    
    # Show active projects
    echo ""
    echo -e "${RED}🏢 Active Client Projects:${NC}"
    if [ -d "projects" ]; then
        for dir in projects/*/; do
            if [ -d "$dir" ]; then
                local project_name=$(basename "$dir")
                echo "  ${LOCK} $project_name"
                ((project_count++))
            fi
        done
    fi
    [ $project_count -eq 0 ] && echo "  (none)"
    
    # Show published content
    echo ""
    echo -e "${GREEN}📰 Published Content:${NC}"
    if [ -d "published" ]; then
        for dir in published/*/; do
            if [ -d "$dir" ]; then
                local content_type=$(basename "$dir")
                echo "  📄 $content_type"
                ((published_count++))
            fi
        done
    fi
    [ $published_count -eq 0 ] && echo "  (none)"
    
    # Show git status
    echo ""
    echo -e "${YELLOW}📝 Local Changes:${NC}"
    if git status --porcelain 2>/dev/null | grep -q .; then
        git status --short
    else
        echo "  ✅ No uncommitted changes"
    fi
    
    # Show last sync
    echo ""
    local last_commit=$(git log -1 --format='%cr' 2>/dev/null)
    echo -e "🕐 Last sync: ${CYAN}${last_commit:-'Unknown'}${NC}"
    
    # Summary
    echo ""
    echo -e "${BLUE}Summary: ${shared_count} shared, ${project_count} projects, ${published_count} published${NC}"
}

# =============================================================================
# CONTRIBUTE - Contribute changes back to shared repositories
# =============================================================================

cmd_contribute() {
    local repo_path=$1
    local commit_message=$2
    
    if [ -z "$repo_path" ]; then
        log_info "Available repositories to contribute to:"
        find . -path "./.*" -prune -o -type d -name "*" -print | grep -E "(shared|projects|published)" | sed 's|^\./||' | sort
        echo ""
        read -p "Enter repository path: " repo_path
    fi
    
    if [ -z "$commit_message" ]; then
        read -p "Enter commit message: " commit_message
    fi
    
    # Validate path exists
    if [ ! -d "$repo_path" ]; then
        log_error "Path does not exist: $repo_path"
        return 1
    fi
    
    # Determine repository name from path
    local repo_name=""
    case $repo_path in
        shared/templates*)
            repo_name="stag-shared-templates"
            ;;
        shared/methodologies*)
            repo_name="stag-shared-methodologies"
            ;;
        shared/research*)
            repo_name="stag-shared-research"
            ;;
        published/whitepapers*)
            repo_name="stag-published-whitepapers"
            ;;
        projects/*)
            local project_name=$(echo "$repo_path" | cut -d'/' -f2)
            repo_name="stag-client-${project_name}"
            ;;
        *)
            log_error "Unknown repository path: $repo_path"
            return 1
            ;;
    esac
    
    log_step "Contributing to ${repo_name}..."
    log_info "${CONTRIBUTE} Message: ${commit_message}"
    
    # Check for changes in the path
    if ! git diff --quiet "$repo_path" || ! git diff --cached --quiet "$repo_path"; then
        # Commit changes locally first
        git add "$repo_path"
        git commit -m "${commit_message}"
        
        # Push changes back to shared repository
        if git subtree push --prefix="$repo_path" "git@github.com:${STAG_ORG}/${repo_name}.git" main; then
            log_success "Successfully contributed to ${repo_name}"
        else
            log_error "Failed to contribute - check permissions and try again"
        fi
    else
        log_warning "No changes detected in $repo_path"
    fi
}

# =============================================================================
# ADD-PERMISSION - Grant repository access to team member
# =============================================================================

cmd_add_permission() {
    local repo_name=$1
    local username=$2
    local permission=${3:-"push"}  # Default to push access
    
    if [ -z "$repo_name" ]; then
        log_info "Available repositories:"
        echo "  Client Projects:"
        echo "    • stag-client-alpha-strategy"
        echo "    • stag-client-beta-digital"
        echo "  Shared Assets:"
        echo "    • stag-shared-templates"
        echo "    • stag-shared-methodologies"
        echo ""
        read -p "Enter repository name: " repo_name
    fi
    
    if [ -z "$username" ]; then
        log_info "STAG team members:"
        echo "  • saurabh    • hemesh     • nischal    • karteek"
        echo "  • pankaj     • rahul      • ashutosh"
        echo ""
        read -p "Enter GitHub username: " username
    fi
    
    # Validate permission level
    case $permission in
        pull|push|admin)
            ;;
        read)
            permission="pull"
            ;;
        write)
            permission="push"
            ;;
        *)
            log_error "Invalid permission: $permission"
            log_info "Valid permissions: pull, push, admin (or read, write)"
            return 1
            ;;
    esac
    
    log_step "Granting ${permission} access to ${username} for ${repo_name}..."
    
    # Check if GitHub CLI is available
    if ! command -v gh &> /dev/null; then
        log_error "GitHub CLI (gh) not found. Please install it first."
        log_info "Alternative: Add collaborator manually on GitHub"
        return 1
    fi
    
    # Add collaborator using GitHub CLI
    if gh repo create "${STAG_ORG}/${repo_name}" --private 2>/dev/null; then
        log_info "Repository already exists, adding collaborator..."
    fi
    
    if gh api repos/"${STAG_ORG}"/"${repo_name}"/collaborators/"${username}" -X PUT -f permission="${permission}"; then
        log_success "Successfully granted ${permission} access to ${username}"
        log_info "${LOCK} ${username} can now access ${repo_name}"
        
        # Show what the user should do next
        echo ""
        log_info "📧 ${username} should now:"
        echo "  1. Run: ./stag.sh add-project ${repo_name}"
        echo "  2. Or add to existing setup: git subtree add --prefix=projects/[name] git@github.com:${STAG_ORG}/${repo_name}.git main --squash"
    else
        log_error "Failed to add collaborator"
        log_info "Check if repository exists and you have admin access"
    fi
}

# =============================================================================
# LIST-PERMISSIONS - Show repository collaborators and permissions
# =============================================================================

cmd_list_permissions() {
    local repo_name=$1
    
    if [ -z "$repo_name" ]; then
        log_info "Enter repository name to check permissions:"
        read -p "Repository name: " repo_name
    fi
    
    # Check if GitHub CLI is available
    if ! command -v gh &> /dev/null; then
        log_error "GitHub CLI (gh) not found. Please install it first."
        return 1
    fi
    
    log_step "Checking permissions for ${repo_name}..."
    
    # Get collaborators
    if gh api repos/"${STAG_ORG}"/"${repo_name}"/collaborators --jq '.[] | [.login, .permissions.admin, .permissions.push, .permissions.pull] | @tsv' > /tmp/stag_permissions.txt 2>/dev/null; then
        echo ""
        echo -e "${BLUE}👥 Repository Access: ${repo_name}${NC}"
        echo "======================================"
        
        while IFS=

# =============================================================================
# CREATE-PROJECT - Create new client project repository
# =============================================================================

cmd_create_project() {
    local client_name=$1
    local project_type=${2:-"strategy"}
    
    if [ -z "$client_name" ]; then
        read -p "Enter client name (e.g., alpha, beta): " client_name
    fi
    
    local repo_name="stag-client-${client_name}-${project_type}"
    local local_path="projects/${client_name}-${project_type}"
    
    log_step "Creating new client project repository..."
    log_info "📋 Repository: ${repo_name}"
    log_info "${FOLDER} Local path: ${local_path}"
    
    # Check if GitHub CLI is available
    if ! command -v gh &> /dev/null; then
        log_error "GitHub CLI (gh) not found. Please install it first."
        log_info "Alternative: Create repository manually on GitHub, then use 'stag.sh add-project'"
        return 1
    fi
    
    # Create repository on GitHub
    log_info "${CONTRIBUTE} Creating repository on GitHub..."
    if gh repo create "${STAG_ORG}/${repo_name}" --private --description "STAG client project: ${client_name} ${project_type}"; then
        log_success "Repository created on GitHub"
        
        # Initialize local project structure
        mkdir -p "${local_path}"
        cd "${local_path}"
        
        # Create project structure
        mkdir -p {proposal,research,presentations,deliverables}
        
        # Create project README
        cat > README.md << EOF
# ${client_name^} ${project_type^} Project

**Project Type**: ${project_type^}
**Client**: ${client_name^}  
**Created**: $(date)
**Team**: [Add team members]
**Status**: Planning

## Project Structure
- [Proposal](proposal/) - Initial proposal and scope
- [Research](research/) - Background research and analysis
- [Presentations](presentations/) - Client presentations  
- [Deliverables](deliverables/) - Final project deliverables

## Confidentiality Notice
${LOCK} This repository contains confidential client information.
Access is restricted to authorized project team members only.

## Team Access
- Project Lead: [Name]
- Technical Lead: [Name]  
- Industry Expert: [Name]
- Contributors: [Names]
EOF
        
        # Initialize git and push
        git init
        git add .
        git commit -m "Initial project structure for ${client_name} ${project_type}"
        git branch -M main
        git remote add origin "git@github.com:${STAG_ORG}/${repo_name}.git"
        git push -u origin main
        
        cd ../..
        
        # Add as subtree to current repository
        log_info "${DOWNLOAD} Adding project to your STAG docs..."
        git subtree add --prefix="${local_path}" \
            "git@github.com:${STAG_ORG}/${repo_name}.git" main --squash
            
        log_success "Client project created and added successfully!"
        log_info "${FOLDER} Project available at: ${local_path}/"
        log_warning "${LOCK} Remember to set up team access permissions on GitHub"
    else
        log_error "Failed to create repository on GitHub"
    fi
}

# =============================================================================
# MAIN SCRIPT LOGIC
# =============================================================================

main() {
    local command=$1
    shift
    
    case $command in
        init)
            cmd_init "$@"
            ;;
        add-shared)
            cmd_add_shared "$@"
            ;;
        add-project)
            cmd_add_project "$@"
            ;;
        add-permission)
            cmd_add_permission "$@"
            ;;
        list-permissions)
            cmd_list_permissions "$@"
            ;;
        sync)
            cmd_sync "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        contribute)
            cmd_contribute "$@"
            ;;
        create-project)
            cmd_create_project "$@"
            ;;
        help|-h|--help)
            show_help
            ;;
        version|-v|--version)
            show_version
            ;;
        *)
            if [ -z "$command" ]; then
                show_help
            else
                log_error "Unknown command: $command"
                echo ""
                show_help
                exit 1
            fi
            ;;
    esac
}

# Run main function with all arguments
main "$@"\t' read -r username admin push pull; do
            if [ "$admin" = "true" ]; then
                echo -e "  👑 ${CYAN}${username}${NC} - Admin (full access)"
            elif [ "$push" = "true" ]; then
                echo -e "  ✏️  ${GREEN}${username}${NC} - Write (can contribute)"
            elif [ "$pull" = "true" ]; then
                echo -e "  👁️  ${YELLOW}${username}${NC} - Read (view only)"
            fi
        done < /tmp/stag_permissions.txt
        
        rm -f /tmp/stag_permissions.txt
        echo ""
        
        # Show repository type warning
        if [[ "$repo_name" == *"client"* ]]; then
            log_warning "${LOCK} Client project - confidential information"
        fi
    else
        log_error "Failed to retrieve permissions"
        log_info "Check if repository exists and you have access"
    fi
}

# =============================================================================
# CREATE-PROJECT - Create new client project repository
# =============================================================================

cmd_create_project() {
    local client_name=$1
    local project_type=${2:-"strategy"}
    
    if [ -z "$client_name" ]; then
        read -p "Enter client name (e.g., alpha, beta): " client_name
    fi
    
    local repo_name="stag-client-${client_name}-${project_type}"
    local local_path="projects/${client_name}-${project_type}"
    
    log_step "Creating new client project repository..."
    log_info "📋 Repository: ${repo_name}"
    log_info "${FOLDER} Local path: ${local_path}"
    
    # Check if GitHub CLI is available
    if ! command -v gh &> /dev/null; then
        log_error "GitHub CLI (gh) not found. Please install it first."
        log_info "Alternative: Create repository manually on GitHub, then use 'stag.sh add-project'"
        return 1
    fi
    
    # Create repository on GitHub
    log_info "${CONTRIBUTE} Creating repository on GitHub..."
    if gh repo create "${STAG_ORG}/${repo_name}" --private --description "STAG client project: ${client_name} ${project_type}"; then
        log_success "Repository created on GitHub"
        
        # Initialize local project structure
        mkdir -p "${local_path}"
        cd "${local_path}"
        
        # Create project structure
        mkdir -p {proposal,research,presentations,deliverables}
        
        # Create project README
        cat > README.md << EOF
# ${client_name^} ${project_type^} Project

**Project Type**: ${project_type^}
**Client**: ${client_name^}  
**Created**: $(date)
**Team**: [Add team members]
**Status**: Planning

## Project Structure
- [Proposal](proposal/) - Initial proposal and scope
- [Research](research/) - Background research and analysis
- [Presentations](presentations/) - Client presentations  
- [Deliverables](deliverables/) - Final project deliverables

## Confidentiality Notice
${LOCK} This repository contains confidential client information.
Access is restricted to authorized project team members only.

## Team Access
- Project Lead: [Name]
- Technical Lead: [Name]  
- Industry Expert: [Name]
- Contributors: [Names]
EOF
        
        # Initialize git and push
        git init
        git add .
        git commit -m "Initial project structure for ${client_name} ${project_type}"
        git branch -M main
        git remote add origin "git@github.com:${STAG_ORG}/${repo_name}.git"
        git push -u origin main
        
        cd ../..
        
        # Add as subtree to current repository
        log_info "${DOWNLOAD} Adding project to your STAG docs..."
        git subtree add --prefix="${local_path}" \
            "git@github.com:${STAG_ORG}/${repo_name}.git" main --squash
            
        log_success "Client project created and added successfully!"
        log_info "${FOLDER} Project available at: ${local_path}/"
        log_warning "${LOCK} Remember to set up team access permissions on GitHub"
    else
        log_error "Failed to create repository on GitHub"
    fi
}

# =============================================================================
# MAIN SCRIPT LOGIC
# =============================================================================

main() {
    local command=$1
    shift
    
    case $command in
        init)
            cmd_init "$@"
            ;;
        add-shared)
            cmd_add_shared "$@"
            ;;
        add-project)
            cmd_add_project "$@"
            ;;
        sync)
            cmd_sync "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        contribute)
            cmd_contribute "$@"
            ;;
        serve)
            cmd_serve "$@"
            ;;
        create-project)
            cmd_create_project "$@"
            ;;
        help|-h|--help)
            show_help
            ;;
        version|-v|--version)
            show_version
            ;;
        *)
            if [ -z "$command" ]; then
                show_help
            else
                log_error "Unknown command: $command"
                echo ""
                show_help
                exit 1
            fi
            ;;
    esac
}

# Run main function with all arguments
main "$@"